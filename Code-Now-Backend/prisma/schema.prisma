// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String               @id @default(uuid())
  email       String               @unique
  password    String
  name        String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  resetTokens PasswordResetToken[]
  role        UserRole             @default(USER)
  Problem     Problem[]
  Submission  Submission[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  tokenHash String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id                 String       @id @default(uuid())
  title              String       @unique
  description        String
  slug               String       @unique
  difficulty         Difficulty
  tags               String[]
  examples           Json
  constraints        String
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  Submission         Submission[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
